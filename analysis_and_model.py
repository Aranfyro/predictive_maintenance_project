import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import (accuracy_score, confusion_matrix,
                             classification_report, roc_curve, roc_auc_score)
from imblearn.over_sampling import RandomOverSampler



def analysis_and_model_page():
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    @st.cache_data
    def load_data():
        try:

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
            data = pd.read_csv("data/predictive_maintenance.csv")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if data.empty:
                raise ValueError("–ó–∞–≥—Ä—É–∂–µ–Ω –ø—É—Å—Ç–æ–π DataFrame")

            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            required_columns = ['Type', 'Air temperature [K]', 'Process temperature [K]',
                                'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]',
                                'Machine failure']

            if not all(col in data.columns for col in required_columns):
                raise ValueError("–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã")

            data = data[required_columns]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            data['Type'] = LabelEncoder().fit_transform(data['Type'])

            return data

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            st.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–º–æ-–Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            return pd.DataFrame({
                'Type': [0, 1, 2, 0, 1, 2, 0, 1, 2, 0],
                'Air temperature [K]': [298, 305, 302, 300, 299, 303, 301, 304, 297, 299],
                'Process temperature [K]': [308, 315, 312, 310, 309, 313, 311, 314, 307, 309],
                'Rotational speed [rpm]': [1550, 1450, 1500, 1520, 1480, 1490, 1510, 1470, 1530, 1540],
                'Torque [Nm]': [42, 38, 40, 41, 39, 40, 41, 39, 43, 38],
                'Tool wear [min]': [10, 210, 110, 50, 180, 200, 30, 220, 5, 190],
                'Machine failure': [0, 1, 0, 0, 1, 1, 0, 1, 0, 1]
            })

    data = load_data()

    if data is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
        return

    st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ó–∞–ø–∏—Å–µ–π: {len(data)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
    class_balance = data['Machine failure'].value_counts(normalize=True)
    if class_balance.min() < 0.1:  # –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∫–ª–∞—Å—Å–æ–≤ –º–µ–Ω—å—à–µ 10%
        st.warning(f"–°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤: {class_balance[1]:.1%} –æ—Ç–∫–∞–∑–æ–≤ vs {class_balance[0]:.1%} –Ω–æ—Ä–º—ã")

    # –†–∞–∑–¥–µ–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    tab1, tab2, tab3 = st.tabs(["üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"])

    with tab1:
        st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(data.head())

        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        st.write(data.describe())

        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
        fig, ax = plt.subplots()
        sns.countplot(x='Machine failure', data=data, ax=ax)
        ax.set_title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        st.pyplot(fig)

        st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        corr = data.corr()
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax)
        st.pyplot(fig)

    with tab2:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        X = data.drop(columns=['Machine failure'])
        y = data['Machine failure']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–∑—Ü–æ–≤
        min_samples = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è

        if len(X) < min_samples:
            st.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {min_samples} –æ–±—Ä–∞–∑—Ü–æ–≤.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º RandomOverSampler –≤–º–µ—Å—Ç–æ SMOTE)
        ros = RandomOverSampler(random_state=42)
        try:
            X_res, y_res = ros.fit_resample(X, y)
            st.info(f"–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(X_res)}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤: {str(e)}")
            X_res, y_res = X, y  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
        test_size = st.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ (%)", 10, 40, 20)
        X_train, X_test, y_train, y_test = train_test_split(
            X_res, y_res, test_size=test_size / 100, random_state=42
        )

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        numeric_cols = ['Air temperature [K]', 'Process temperature [K]',
                        'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]']
        scaler = StandardScaler()

        try:
            X_train[numeric_cols] = scaler.fit_transform(X_train[numeric_cols])
            X_test[numeric_cols] = scaler.transform(X_test[numeric_cols])
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
            ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å", "XGBoost"],
            key="model_select"
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π
        if model_type == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
            C = st.slider("–ü–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ (C)", 0.01, 10.0, 1.0)
            max_iter = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", 100, 1000, 100)
            model = LogisticRegression(C=C, max_iter=max_iter, random_state=42)

        elif model_type == "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å":
            n_estimators = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤", 10, 200, 100)
            max_depth = st.selectbox("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞", [None, 5, 10, 15, 20])
            model = RandomForestClassifier(
                n_estimators=n_estimators,
                max_depth=max_depth,
                random_state=42
            )

        else:  # XGBoost
            n_estimators = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤", 10, 200, 100)
            learning_rate = st.slider("Learning rate", 0.01, 0.5, 0.1)
            model = XGBClassifier(
                n_estimators=n_estimators,
                learning_rate=learning_rate,
                random_state=42,
                eval_metric='logloss'
            )

        if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary"):
            with st.spinner("–ò–¥—ë—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                try:
                    model.fit(X_train, y_train)

                    # –û—Ü–µ–Ω–∫–∞
                    y_pred = model.predict(X_test)
                    y_proba = model.predict_proba(X_test)[:, 1]

                    # –ú–µ—Ç—Ä–∏–∫–∏
                    accuracy = accuracy_score(y_test, y_pred)
                    conf_matrix = confusion_matrix(y_test, y_pred)
                    class_report = classification_report(y_test, y_pred)
                    roc_auc = roc_auc_score(y_test, y_proba)

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ session state
                    st.session_state.model = model
                    st.session_state.scaler = scaler
                    st.session_state.accuracy = accuracy
                    st.session_state.roc_auc = roc_auc
                    st.session_state.numeric_cols = numeric_cols

                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.success("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    st.metric("Accuracy", f"{accuracy:.2%}")
                    st.metric("ROC-AUC", f"{roc_auc:.2%}")

                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
                        fig, ax = plt.subplots()
                        sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', ax=ax)
                        ax.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ")
                        ax.set_ylabel("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ")
                        st.pyplot(fig)

                    with col2:
                        st.subheader("ROC-–∫—Ä–∏–≤–∞—è")
                        fpr, tpr, _ = roc_curve(y_test, y_proba)
                        fig, ax = plt.subplots()
                        ax.plot(fpr, tpr, label=f'AUC = {roc_auc:.2f}')
                        ax.plot([0, 1], [0, 1], 'k--')
                        ax.set_xlabel("False Positive Rate")
                        ax.set_ylabel("True Positive Rate")
                        ax.legend()
                        st.pyplot(fig)

                    st.subheader("–û—Ç—á—ë—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    st.code(class_report)

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")

    with tab3:
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

        if 'model' not in st.session_state:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'")
        else:
            with st.form("prediction_form"):
                st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:")

                col1, col2 = st.columns(2)
                with col1:
                    type_ = st.selectbox("–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", ["L", "M", "H"])
                    air_temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ [K]", min_value=250.0, max_value=350.0, value=300.0)
                    process_temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ [K]", min_value=250.0, max_value=350.0,
                                                   value=310.0)

                with col2:
                    rotational_speed = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è [rpm]", min_value=1000, max_value=3000,
                                                       value=1500)
                    torque = st.number_input("–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç [Nm]", min_value=0.0, max_value=100.0, value=40.0)
                    tool_wear = st.number_input("–ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ [min]", min_value=0, max_value=300, value=0)

                submitted = st.form_submit_button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")

                if submitted:
                    try:
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        input_data = pd.DataFrame({
                            'Type': [0 if type_ == 'L' else 1 if type_ == 'M' else 2],
                            'Air temperature [K]': [air_temp],
                            'Process temperature [K]': [process_temp],
                            'Rotational speed [rpm]': [rotational_speed],
                            'Torque [Nm]': [torque],
                            'Tool wear [min]': [tool_wear]
                        })

                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                        input_data_scaled = input_data.copy()
                        input_data_scaled[st.session_state.numeric_cols] = st.session_state.scaler.transform(
                            input_data[st.session_state.numeric_cols]
                        )

                        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                        model = st.session_state.model
                        prediction = model.predict(input_data_scaled)[0]
                        proba = model.predict_proba(input_data_scaled)[0][1]

                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        if prediction == 1:
                            st.error(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è –æ—Ç–∫–∞–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!")
                            st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞: {proba:.1%}")
                            st.image("https://img.icons8.com/color/96/high-risk.png", width=100)
                        else:
                            st.success(f"‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                            st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞: {proba:.1%}")
                            st.image("https://img.icons8.com/color/96/ok--v1.png", width=100)

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        st.info(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {st.session_state.accuracy:.1%}")
                        st.info(f"ROC-AUC –º–æ–¥–µ–ª–∏: {st.session_state.roc_auc:.2f}")

                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")